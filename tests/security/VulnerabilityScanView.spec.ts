import { describe, it, expect, beforeEach, vi } from 'vitest'
import { mount } from '@vue/test-utils'
import VulnerabilityScanView from '@/components/security/VulnerabilityScanView.vue'
import { useSecurityManagement } from '@/composables/useSecurityManagement'
import type { Vulnerability } from '@/types/security'
import { Severity, VulnerabilityStatus } from '@/types/security'

// Mock the composable
vi.mock('@/composables/useSecurityManagement')

describe('VulnerabilityScanView', () => {
  const mockVulnerabilities: Vulnerability[] = [
    {
      id: '1',
      title: 'SQL Injection in Login Form',
      description: 'Unsanitized input allows SQL injection',
      severity: Severity.CRITICAL,
      status: VulnerabilityStatus.OPEN,
      discoveredDate: new Date('2024-01-10T10:00:00Z'),
      affectedComponent: 'Authentication Module',
      cvssScore: 9.8,
      remediation: 'Use parameterized queries'
    },
    {
      id: '2',
      title: 'Outdated SSL/TLS Protocol',
      description: 'Server supports TLS 1.0',
      severity: Severity.HIGH,
      status: VulnerabilityStatus.IN_PROGRESS,
      discoveredDate: new Date('2024-01-12T10:00:00Z'),
      affectedComponent: 'Web Server',
      cvssScore: 7.5,
      remediation: 'Upgrade to TLS 1.3'
    },
    {
      id: '3',
      title: 'Missing Security Headers',
      description: 'X-Frame-Options header not set',
      severity: Severity.MEDIUM,
      status: VulnerabilityStatus.RESOLVED,
      discoveredDate: new Date('2024-01-05T10:00:00Z'),
      resolvedDate: new Date('2024-01-08T10:00:00Z'),
      affectedComponent: 'Web Server',
      cvssScore: 5.3,
      remediation: 'Add security headers to server config'
    },
    {
      id: '4',
      title: 'Weak Password Policy',
      description: 'Minimum password length is too short',
      severity: Severity.LOW,
      status: VulnerabilityStatus.OPEN,
      discoveredDate: new Date('2024-01-14T10:00:00Z'),
      affectedComponent: 'User Management',
      cvssScore: 3.1,
      remediation: 'Enforce stronger password requirements'
    }
  ]

  const mockRunVulnerabilityScan = vi.fn()

  beforeEach(() => {
    vi.clearAllMocks()
    vi.mocked(useSecurityManagement).mockReturnValue({
      vulnerabilities: { value: mockVulnerabilities },
      loading: { value: false },
      runVulnerabilityScan: mockRunVulnerabilityScan
    } as any)
  })

  it('should render component title', () => {
    const wrapper = mount(VulnerabilityScanView)
    expect(wrapper.find('h2').text()).toContain('Vulnerability Scanner')
  })

  it('should display scan controls', () => {
    const wrapper = mount(VulnerabilityScanView)
    const scanButton = wrapper.find('button.scan-btn')
    expect(scanButton.exists()).toBe(true)
  })

  it('should display scan type selector', () => {
    const wrapper = mount(VulnerabilityScanView)
    const scanTypeSelect = wrapper.find('select.scan-type')
    expect(scanTypeSelect.exists()).toBe(true)
  })

  it('should have three scan types', () => {
    const wrapper = mount(VulnerabilityScanView)
    const scanTypeOptions = wrapper.findAll('select.scan-type option')
    expect(scanTypeOptions.length).toBeGreaterThanOrEqual(3)
  })

  it('should call runVulnerabilityScan when scan clicked', async () => {
    const wrapper = mount(VulnerabilityScanView)
    const scanButton = wrapper.find('button.scan-btn')
    
    await scanButton.trigger('click')
    expect(mockRunVulnerabilityScan).toHaveBeenCalled()
  })

  it('should display vulnerabilities table', () => {
    const wrapper = mount(VulnerabilityScanView)
    const table = wrapper.find('.vulnerabilities-table')
    expect(table.exists()).toBe(true)
  })

  it('should display all vulnerabilities', () => {
    const wrapper = mount(VulnerabilityScanView)
    const rows = wrapper.findAll('tbody tr')
    expect(rows.length).toBe(4)
  })

  it('should display vulnerability title', () => {
    const wrapper = mount(VulnerabilityScanView)
    const firstRow = wrapper.find('tbody tr')
    expect(firstRow.text()).toContain('SQL Injection')
  })

  it('should display severity badge', () => {
    const wrapper = mount(VulnerabilityScanView)
    const severityBadge = wrapper.find('.severity-badge')
    expect(severityBadge.exists()).toBe(true)
  })

  it('should show critical severity with correct class', () => {
    const wrapper = mount(VulnerabilityScanView)
    const criticalBadge = wrapper.find('.severity-critical')
    expect(criticalBadge.exists()).toBe(true)
  })

  it('should show high severity with correct class', () => {
    const wrapper = mount(VulnerabilityScanView)
    const highBadge = wrapper.find('.severity-high')
    expect(highBadge.exists()).toBe(true)
  })

  it('should show medium severity with correct class', () => {
    const wrapper = mount(VulnerabilityScanView)
    const mediumBadge = wrapper.find('.severity-medium')
    expect(mediumBadge.exists()).toBe(true)
  })

  it('should show low severity with correct class', () => {
    const wrapper = mount(VulnerabilityScanView)
    const lowBadge = wrapper.find('.severity-low')
    expect(lowBadge.exists()).toBe(true)
  })

  it('should display status badge', () => {
    const wrapper = mount(VulnerabilityScanView)
    const statusBadge = wrapper.find('.status-badge')
    expect(statusBadge.exists()).toBe(true)
  })

  it('should display CVSS score', () => {
    const wrapper = mount(VulnerabilityScanView)
    const cvssScore = wrapper.find('.cvss-score')
    expect(cvssScore.text()).toContain('9.8')
  })

  it('should display affected component', () => {
    const wrapper = mount(VulnerabilityScanView)
    const component = wrapper.find('td.component')
    expect(component.text()).toContain('Authentication Module')
  })

  it('should display discovered date', () => {
    const wrapper = mount(VulnerabilityScanView)
    const date = wrapper.find('td.discovered-date')
    expect(date.exists()).toBe(true)
  })

  it('should filter by severity', async () => {
    const wrapper = mount(VulnerabilityScanView)
    const severityFilter = wrapper.find('select.severity-filter')
    
    await severityFilter.setValue('critical')
    // Should filter to show only critical vulnerabilities
    expect(wrapper.vm).toBeDefined()
  })

  it('should filter by status', async () => {
    const wrapper = mount(VulnerabilityScanView)
    const statusFilter = wrapper.find('select.status-filter')
    
    await statusFilter.setValue('open')
    // Should filter to show only open vulnerabilities
    expect(wrapper.vm).toBeDefined()
  })

  it('should search vulnerabilities', async () => {
    const wrapper = mount(VulnerabilityScanView)
    const searchInput = wrapper.find('input[type="search"]')
    
    await searchInput.setValue('SQL Injection')
    // Should filter to show matching vulnerabilities
    expect(wrapper.vm).toBeDefined()
  })

  it('should display statistics summary', () => {
    const wrapper = mount(VulnerabilityScanView)
    const statistics = wrapper.find('.vuln-statistics')
    expect(statistics.exists()).toBe(true)
  })

  it('should show total vulnerabilities count', () => {
    const wrapper = mount(VulnerabilityScanView)
    const totalCount = wrapper.find('.total-vulns')
    expect(totalCount.text()).toContain('4')
  })

  it('should show critical count', () => {
    const wrapper = mount(VulnerabilityScanView)
    const criticalCount = wrapper.find('.critical-count')
    expect(criticalCount.text()).toContain('1')
  })

  it('should show high count', () => {
    const wrapper = mount(VulnerabilityScanView)
    const highCount = wrapper.find('.high-count')
    expect(highCount.text()).toContain('1')
  })

  it('should show medium count', () => {
    const wrapper = mount(VulnerabilityScanView)
    const mediumCount = wrapper.find('.medium-count')
    expect(mediumCount.text()).toContain('1')
  })

  it('should show low count', () => {
    const wrapper = mount(VulnerabilityScanView)
    const lowCount = wrapper.find('.low-count')
    expect(lowCount.text()).toContain('1')
  })

  it('should open vulnerability details modal', async () => {
    const wrapper = mount(VulnerabilityScanView)
    const viewButton = wrapper.find('button.view-details-btn')
    
    await viewButton.trigger('click')
    const modal = wrapper.find('.modal.vuln-details')
    expect(modal.exists()).toBe(true)
  })

  it('should display full vulnerability description in modal', async () => {
    const wrapper = mount(VulnerabilityScanView)
    const viewButton = wrapper.find('button.view-details-btn')
    
    await viewButton.trigger('click')
    const description = wrapper.find('.vuln-description')
    expect(description.text()).toContain('Unsanitized input')
  })

  it('should display remediation steps in modal', async () => {
    const wrapper = mount(VulnerabilityScanView)
    const viewButton = wrapper.find('button.view-details-btn')
    
    await viewButton.trigger('click')
    const remediation = wrapper.find('.remediation')
    expect(remediation.text()).toContain('parameterized queries')
  })

  it('should show scan progress during scanning', () => {
    vi.mocked(useSecurityManagement).mockReturnValue({
      vulnerabilities: { value: mockVulnerabilities },
      loading: { value: true },
      runVulnerabilityScan: mockRunVulnerabilityScan
    } as any)

    const wrapper = mount(VulnerabilityScanView)
    const progress = wrapper.find('.scan-progress')
    expect(progress.exists()).toBe(true)
  })

  it('should disable scan button during scanning', () => {
    vi.mocked(useSecurityManagement).mockReturnValue({
      vulnerabilities: { value: mockVulnerabilities },
      loading: { value: true },
      runVulnerabilityScan: mockRunVulnerabilityScan
    } as any)

    const wrapper = mount(VulnerabilityScanView)
    const scanButton = wrapper.find('button.scan-btn')
    expect(scanButton.attributes('disabled')).toBeDefined()
  })

  it('should display last scan date', () => {
    const wrapper = mount(VulnerabilityScanView)
    const lastScan = wrapper.find('.last-scan-date')
    expect(lastScan.exists()).toBe(true)
  })

  it('should export vulnerability report', () => {
    const wrapper = mount(VulnerabilityScanView)
    const exportButton = wrapper.find('button.export-vulns-btn')
    expect(exportButton.exists()).toBe(true)
  })

  it('should display resolved date for resolved vulnerabilities', () => {
    const wrapper = mount(VulnerabilityScanView)
    const rows = wrapper.findAll('tbody tr')
    const resolvedRow = rows[2] // Third vulnerability is resolved
    expect(resolvedRow.text()).toBeTruthy()
  })

  it('should sort vulnerabilities by severity', () => {
    const wrapper = mount(VulnerabilityScanView)
    const firstRow = wrapper.find('tbody tr')
    // First row should be critical (highest severity)
    expect(firstRow.text()).toContain('CRITICAL')
  })

  it('should show empty state when no vulnerabilities', () => {
    vi.mocked(useSecurityManagement).mockReturnValue({
      vulnerabilities: { value: [] },
      loading: { value: false },
      runVulnerabilityScan: mockRunVulnerabilityScan
    } as any)

    const wrapper = mount(VulnerabilityScanView)
    const emptyState = wrapper.find('.empty-state')
    expect(emptyState.exists()).toBe(true)
  })

  it('should display scan type description', () => {
    const wrapper = mount(VulnerabilityScanView)
    const description = wrapper.find('.scan-type-description')
    expect(description.exists()).toBe(true)
  })

  it('should mark in-progress vulnerabilities', () => {
    const wrapper = mount(VulnerabilityScanView)
    const inProgressBadge = wrapper.find('.status-in-progress')
    expect(inProgressBadge.exists()).toBe(true)
  })

  it('should highlight open critical vulnerabilities', () => {
    const wrapper = mount(VulnerabilityScanView)
    const criticalOpenRow = wrapper.find('tr.critical-open')
    expect(criticalOpenRow.exists()).toBe(true)
  })

  it('should refresh vulnerabilities list', () => {
    const wrapper = mount(VulnerabilityScanView)
    const refreshButton = wrapper.find('button.refresh-btn')
    expect(refreshButton.exists()).toBe(true)
  })
})
